You are given two integers n and k. Find the greatest integer x, such that, x^k <= n.

Input Format
First line contains number of test cases, T. Next T lines contains integers, n and k.

Constraints
1<=T<=10
1<=N<=10^15
1<=K<=10^4

Output Format
Output the integer x

Sample Input
2
10000 1
1000000000000000 10

Sample Output
10000
31

Explanation
For the first test case, for x=10000, 10000^1=10000=n

//solved using binary search algorithm
import java.util.*;
public class Main {
    public static void main(String args[]) {
        // Your Code Here
		Scanner sc = new Scanner(System.in);
		int T = sc.nextInt();
		while(T-- > 0){
			long n = sc.nextLong();
			int k = sc.nextInt();
			System.out.println(kth_root(n,k));
		}
    }
	public static long kth_root(long n, int k){
		long low = 0;
		long high = n;
		long res = 0;
		while(low <= high){
			long mid = (high + low) / 2;
			if(Math.pow(mid,k) == n){
				return mid;
			}
			else if(Math.pow(mid,k) > n){
				high = mid - 1;
			}
			else{
				res = mid;
				low = mid + 1;
			}
		}
		return res;
	}
}
